#!/bin/bash
# @software: PyCharm
# @author: Lionel Johnson
# @contact: https://fairy.host
# @organization: https://github.com/FairylandFuture
# @since: 2024-06-22 18:07:39 UTC+8

# Terminal output color
RESET_COLOR="\e[0m"
RED_COLOR="\e[31m"
GREEN_COLOR="\e[32m"

EXECUTE_PATH="$(dirname "$0")"

CONTAINER_NAME="redis-service"
CONTAINER_USER="$(id -u)"
CONTAINER_GROUP="$(id -g)"
DOCKER_VOLUME_DIR="/data/container/volume"

REDIS_CONF_FILE_PATH="${EXECUTE_PATH}/conf/redis.conf"

LOCAL_REDIS_CONF_DIR_PATH="${DOCKER_VOLUME_DIR}/${CONTAINER_NAME}/conf"
LOCAL_REDIS_DATA_DIR_PATH="${DOCKER_VOLUME_DIR}/${CONTAINER_NAME}/data"
LOCAL_REDIS_LOG_DIR_PATH="${DOCKER_VOLUME_DIR}/${CONTAINER_NAME}/logs"

check_requirements() {
  if ! command -v docker &>/dev/null; then
    echo -e "${RED_COLOR}Docker is not installed. Please install Docker and try again.${RESET_COLOR}"
    exit 1
  fi
}

check_directory() {
  local dir_path=$1
  if [ -d "$dir_path" ]; then
    echo -e "${GREEN_COLOR}Directory ${dir_path} exists.${RESET_COLOR}"
  else
    echo -e "${GREEN_COLOR}Directory ${dir_path} does not exist, creating it${RESET_COLOR}"
    if mkdir -p "$dir_path"; then
      echo -e "${GREEN_COLOR}Directory ${dir_path} created successfully.${RESET_COLOR}"
    else
      echo -e "${RED_COLOR}Failed to create directory ${dir_path}.${RESET_COLOR}"
      exit 1
    fi
  fi
}

change_directory_owner() {
  local dir_path=$1
  echo -e "${GREEN_COLOR}Changing ownership of directory ${dir_path} ...${RESET_COLOR}"
  if sudo chown -R "$CONTAINER_USER":"$CONTAINER_GROUP" "$dir_path"; then
    echo -e "${GREEN_COLOR}Successfully changed ownership of directory ${dir_path}.${RESET_COLOR}"
  else
    echo -e "${RED_COLOR}Failed to change ownership of directory ${dir_path}.${RESET_COLOR}"
    exit 1
  fi
}

main() {
  check_requirements

  if [ "$EUID" -ne 0 ]; then
    echo -e "${RED_COLOR}The script must be run as root or with sudo.${RESET_COLOR}"
    exit
  fi

  if [ "$SUDO_USER" = "root" ] || [ "$USER" == "root" ]; then
    echo -e "${RED_COLOR}Running as root, creating docker-run user and group...${RESET_COLOR}"
    useradd -M -N -s /sbin/nologin -g docker docker-executor >>/dev/null
    usermod -aG docker docker-executor
    CONTAINER_USER=$(id -u docker-executor)
    CONTAINER_GROUP=$(id -g docker-executor)
  else
    CONTAINER_USER=$(id -u "$SUDO_USER")
    CONTAINER_GROUP=$(id -g "$SUDO_USER")
  fi

  check_directory "$LOCAL_REDIS_CONF_DIR_PATH"
  check_directory "$LOCAL_REDIS_DATA_DIR_PATH"
  check_directory "$LOCAL_REDIS_LOG_DIR_PATH"

  if [[ -f "$REDIS_CONF_FILE_PATH" ]]; then
    echo -e "${GREEN_COLOR}File exists: ${REDIS_CONF_FILE_PATH}${RESET_COLOR}"
    if cp "$REDIS_CONF_FILE_PATH" "$LOCAL_REDIS_CONF_DIR_PATH"; then
      echo -e "${GREEN_COLOR}Successfully copied file.${RESET_COLOR}"
    else
      echo -e "${RED_COLOR}Failed to copy file.${RESET_COLOR}"
      exit 1
    fi
  else
    echo -e "${RED_COLOR}File does not exist: ${MYSQL_CONF_PATH}${RESET_COLOR}"
    exit 1
  fi

  change_directory_owner "$LOCAL_REDIS_CONF_DIR_PATH"
  change_directory_owner "$LOCAL_REDIS_DATA_DIR_PATH"
  change_directory_owner "$LOCAL_REDIS_LOG_DIR_PATH"

  local docker_command=(
    "docker"
    "run"
    "-d"
    "--name" "$CONTAINER_NAME"
    "--network" "DockerCustomNet"
    "--ip" "173.1.10.3"
    "--user" "$CONTAINER_USER":"$CONTAINER_GROUP"
    "--privileged=true"
    "-e" "TZ=Asia/Shanghai"
    "-v" "${LOCAL_REDIS_CONF_DIR_PATH}:/etc/redis"
    "-v" "${LOCAL_REDIS_DATA_DIR_PATH}:/data"
    "-v" "${LOCAL_REDIS_LOG_DIR_PATH}:/var/log/redis"
    "-p" "51003:6379"
    "--restart" "always"
    "redis:latest"
    "redis-server" "/etc/redis/redis.conf"
  )

  if "${docker_command[@]}"; then
    echo -e "${GREEN_COLOR}PostgreSQL service started successfully.${RESET_COLOR}"
  else
    echo -e "${RED_COLOR}Failed to start PostgreSQL service.${RESET_COLOR}"
  fi

  docker logs -f "$CONTAINER_NAME"

}

main
